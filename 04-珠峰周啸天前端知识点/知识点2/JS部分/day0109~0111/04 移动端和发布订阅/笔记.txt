移动端开发
  设备：手机「安卓（鸿蒙）和IOS」、平板电脑
    手机常用尺寸：
     + iphone5- 宽度:320px
     + iphone6+ 宽度:375px
     + iphone6+Plus/XR 宽度:414
     + 安卓手机常见的尺寸：360px...
    平板电脑常用尺寸：
     + ipad  竖屏768*1024  横屏1024*768
     + ipad pro  1024*1366
    移动端非常重要的知识点：响应式适配「围绕结构和样式」 *****
  操作：
    告别了鼠标和实体键盘，采用手指及虚拟键盘的方式来操作
    移动端的事件和PC端也是有区别的  *****
  产品：
    + NativeApp 原生App「应用商店中，下载和安装的」
    + 小程序「在其它App中打开的小应用，微信/支付宝/百度/抖音/美团等小程序」
    + WebApp 其实就是HTML5页面
      + 在手机浏览器中访问的页面
      + 在某一个App中访问的页面，例如微信中！！

扫盲：关于移动端各个产品开发需要的技术栈
  + 学习jsBridge技术「学会如何调用或者编写bridge.js」
  + 想拿js做原生App，需要掌握：uni-app/react-native/flutter等技术
  + 想做小程序，需要掌握：微信原生小程序 或者 uni-app(vue) 或者 taro(react) 等技术

移动端事件的处理
  + 因为移动端缺少鼠标和实体键盘，所以PC端的 mousexxx（或keyxxx）这样的事件，在移动端支持度都不是很好，但是 blur/load/error/scroll/resize 等事件，在移动端也是被支持的！！
  + 移动端的操作是依赖手指完成的（或者依赖虚拟键盘完成的）
    对于虚拟键盘：一般需要监测内容的输入，我们用 input 来代替keydown/keyup
      inputBox.oninput=function(){ ... };
    对于手指操作：
      touch事件模型：touchstart/touchmove/touchend...
      gesture事件模型：gesturestart/gesturechange/gestureend...
      移动端常见的操作
        + 点击  ->基于touch事件模型自己去处理
        + 单击「300ms内没有触发第二次点击操作，则为单击，否则为双击」  ->click
        + 双击  ->dblclick
        + 长按「750ms内手指按住没有松开，则认为是长按」
        + 滑动（含：各个方向的滑动）
        + 缩放
        + 旋转
        + ...
      click事件在PC端和移动端都支持，但是表现形式是不一样的
        + PC端：click是点击事件
        + 移动端：click是单击事件「所以存在300ms延迟，系统要判断是否发生第二次点击，从而确定是单击还是双击，只有识别出确定是单击，才会触发click」

移动端响应式布局
  @1 传统PC端开发「只需要在PC端展示」
    + 固定版心的：采用固定布局，不需要做响应式
    + 全屏的管理系统：需要做响应式的
      外层容器(或者大盒子)的宽高，以百分比布局(或vw/vh)为主：“流式布局”
      内部的元素大小、间距、字体等相关样式，采用固定方式「?px」，然后基于@media指定相关的条件，对写好的样式进行微调整，对布局结构进行一些微调！！

  @2 PC端和移动端用的是同一套项目，一般用于结构样式比较简单介绍类网站
    技术方案：以流式布局和@media媒体查询共同处理
    + 首先按照PC端的效果进行开发「设计师给的设计稿一般也是PC端的」
    + 然后逐渐缩小视口，基于@media，在不同的视口大小下，对现有的结构及样式进行调整「基于@media处理的条件越多，样式写的越多，最后的效果也就越好」
    + @media处理的顺序：从大尺寸向小尺寸去修改样式

  @3 专门开发只在移动端访问的页面{PC端有单独的一套项目}
    对于PAD端的处理：
      + 有的是和PC端保持一致，在PC的基础上进行微调
      + 有的是和移动端保持一致{一般固定一个最大的宽度，左右两边流出空白}
      + 也有专门针对于pad端开发一套新项目的
    技术方案：REM等比缩放

  @4 移动端访问的产品，但是属于全屏的项目，例如：邀请函、音乐相册...
    如果只用REM来处理，可能会出现，内容超过一屏幕「因为设备的宽高比是不同的」
    这种需求是很复杂的，需要基于 REM+@media+流式布局 混合在一起去处理！！

  @5 flex不算是响应式布局方案，它是布局的辅助方案，不论是固定布局，还是响应式布局，涉及排列的需求，都可以基于flex来处理「“拒绝使用float从我做起”」

==============================
  REM响应式布局方案
    px：pixel像素，固定单位
    非固定单位「相对单位」
      em：相对于父容器字体大小设定的
      rem：root em 相对于html的字体大小设定的
  html{
    font-size:20px; // 1rem=20px
  }
  .box{
    width:100px 或者 5rem;
    height:200px 或者 10rem;
  }
  REM相对PX的好处：
    px是固定值，不会受外界其它因素的影响，而改变样式，如果想修改样式，只能给对应的元素重新设置样式值「假设有页面中有100个元素，当屏幕尺寸改变，我们想让这些元素样式都跟着变，我们只能一个个的去修改这些元素的样式」！！
    rem是相对值，受到html的字体大小影响，同样还是有100个元素，如果样式单位都用rem来处理，后期只要把html的字体大小进行调整，这样所有元素的样式都会同时跟着等比缩放！！
  -------
  REM响应式布局具体的开发步骤：
    1. 首先找设计师要设计稿「设计稿一般都是750宽度的」
    2. 设定一个750宽度的设备上，REM和PX的换算比例
       html{
        font-size:100px; //1rem=100px
       }
       这个初始换算比例，一定要方便我们后面的计算
         10px 被pass掉，因为浏览器最小是12px，我们写10，浏览器是按照12来的！！
         20px 可以
         100px 这是我们首推的
    3. 严格按照设计稿去测量元素的样式，只不过在编写样式的时候，“把所有的px换算为rem”！
      例如：我们测量出盒子的大小是268*128 「750设计稿中」
      .box{
        width:2.68rem;
        height:1.28rem;
      }
    4. 需要基于JS去监测真实渲染设备的宽度，算出和750设计稿之间的缩放比例，让REM和PX的换算比例，也跟着等比缩放，这样之前所有以REM为单位的样式，也都会跟着等比缩放！！
       750/100 = 设备宽度/?
       ? = 设备宽度/(750/100)
       ? = 设备宽度*100/750
    5. 往往我们还需要做一个最大宽度和换算比例的处理
      如果渲染的设备超过750(设计稿)的宽度了，我们：
      + 换算比例，停留在1:100，不在继续放大
      + 页面中所有的内容居中，左右两边预留空白

  移动端响应式布局开发，一定要加入的一句话
    viewport：设置视口的规则(html的宽度，或者说页面渲染的规则)
      width视口的宽度：device-width设备的宽度 -> 设备多宽，页面(视口)就多宽
      initial-scale初始缩放比例：1.0 不放大也不缩小
      maximum-scale最大缩放比例：1.0
      minimum-scale最小缩放比例：1.0
      user-scalable是否允许用户手动缩放：no不允许
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">